#pragma once

#include <stdint.h>

#define RAM_SIZE 4096
#define RAM_START 0x0
#define RAM_PROG_START 0x200
#define DISPLAY_WIDTH 64
#define DISPLAY_HEIGHT 32

#define STACK_SIZE 16
#define REGISTER_NUM 16
#define INSTRUCTION_NUM 36

typedef uint8_t byte;
typedef uint16_t word;

//RAM of chip, as per the technical
// specifications, it is 4096 bytes

//Also stores 
//0 1 2 3 4 5 6 7 8 9 A B C D E F
//as first 5*16 byes of memory.
byte ram[RAM_SIZE] = {
    0xf0,0x90,0x90,0x90,0xf0,
    0x20,0x60,0x20,0x20,0x70,
    0xF0,0x10,0xF0,0x80,0xF0,
    0xF0,0x10,0xF0,0x10,0xF0,
    0x90,0x90,0xF0,0x10,0x10,
    0xF0,0x80,0xF0,0x10,0xF0,
    0xF0,0x80,0xF0,0x90,0xF0,
    0xF0,0x10,0x20,0x40,0x40,
    0xF0,0x90,0xF0,0x90,0xF0,
    0xF0,0x90,0xF0,0x10,0xF0,
    0xF0,0x90,0xF0,0x90,0x90,
    0xE0,0x90,0xE0,0x90,0xE0,
    0xF0,0x80,0x80,0x80,0xF0,
    0xE0,0x90,0x90,0x90,0xE0,
    0xF0,0x80,0xF0,0x80,0xF0,
    0xF0,0x80,0xF0,0x80,0x80
}; 

//16 8-bit registers, Vx where x is 
//from 0 to F, in our case, 
//we access a register as V[x];
byte V[REGISTER_NUM];

//The callstack holds 16 16-bit
//addresses to the memory location
//where you should return when a
//subroutine is finsihed.

//sp is the stack pointer, it is
//decremented and incremented as
//we push or pop addresses to the
//stack
word callstack[STACK_SIZE];
byte sp = 0;

//Program Counter that stores the 
//current instruction currently executed
word pc = 0;

byte display[DISPLAY_HEIGHT * DISPLAY_WIDTH];

//This register is generally used to
//store memory addresses, so only 
//the lowest (rightmost) 12 
//bits are usually used.
word I = 0;